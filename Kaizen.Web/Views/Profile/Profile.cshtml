@inject IHttpContextAccessor Accessor;

@model Kaizen.Models.AdminModel.ProfileModel
@{
    Layout = "SidebarLayout";
}


<style>
    #dHeader {
        font-size: 16px !important;
        margin-top: -10px;
        margin-left: 7px;
    }

    #blkh {
        color: black;
        font-weight: 500;
        font-size: 13px;
    }
    .right{
        float:right;
    }
    .middle{}
</style>
<div class="card bg-light">

    <div class="card rounded bg-white p-2  mt-2 ml-2 mr-2 mb-2">
        <div class="col-lg-12 p-md-0 p-2">
            <div class="welcome-text">
                <label class="" id="dHeader">Kaizen > My Profile > Edit My Profile</label>
            </div>
        </div>
    </div>

    <div class="card p-3 border rounded ml-2 mr-2 mb-2 bg-white ">
        <div class="form-row">
            <div class="form-group col-md-12">
                <label class="card-title" id="blkh">Edit My Profile</label>
                <hr />
            </div>            
        </div>
        <div class="custom-line mb-3"></div>
        @using (Html.BeginForm(FormMethod.Post, new { id = "profileUserForm" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-row">
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.EmpID, "Emp ID", htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.EmpID, new { htmlAttributes = new { @class = "form-control", placeholder = "Employee ID", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.EmpID, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.FirstName, "First Name", htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", type = "text", pattern = "[A-Za-z]+", title = "Please enter Valid text", placeholder = "First Name" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    <span id="firstNameError" class="text-danger"></span>
                </div>
                @* <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MiddleName, "Middle Name", htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", type = "text", pattern = "[A-Za-z]+", title = "Please enter Valid text", placeholder = "Middle Name" } })
                    @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                    <span id="middleNameError" class="text-danger"></span>
                </div> *@
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.MiddleName, "Middle Name", htmlAttributes: new { @class = "control-label" })
                    <input type="text" asp-for="MiddleName" id="MiddleName" name="MiddleName" class="form-control txt-width" placeholder="Middle Name">
                    <span id="middleNameError" class="text-danger"></span>
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.LastName, "Last Name", htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", type = "text", pattern = "[A-Za-z]+", title = "Please enter Valid text", placeholder = "Last Name" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    <span id="lastNameError" class="text-danger"></span>
                </div>
            </div>               
            <div class="form-row">
                <div class="form-group col-md-3">
                    <label for="Gender">Gender</label>
                    <span class="text-danger">*</span>
                    <div class="row">
                        @if ((Model.Gender).ToString() != null && (Model.Gender).ToString() == "M")
                        {
                            <div class="form-check">
                                <input type="radio" name="Gender" id="maleRadio" value="M" checked />Male
                                <input type="radio" name="Gender" id="femaleRadio" value="F" disabled />Female
                                <input type="radio" name="Gender" id="otherRadio" value="O" disabled />Other
                            </div>
                        }
                        @if ((Model.Gender).ToString() != null && (Model.Gender).ToString() == "F")
                        {
                            <div class="form-check">
                                <input type="radio" name="Gender" id="maleRadio" value="M" disabled />Male
                                <input type="radio" name="Gender" id="femaleRadio" value="F" checked />Female
                                <input type="radio" name="Gender" id="otherRadio" value="O" disabled />Other
                            </div>
                        }
                        @if ((Model.Gender).ToString() != null && (Model.Gender).ToString() == "O")
                        {
                            <div class="form-check">
                                <input type="radio" name="Gender" id="maleRadio" value="M" disabled />Male
                                <input type="radio" name="Gender" id="femaleRadio" value="F" disabled />Female
                                <input type="radio" name="Gender" id="otherRadio" value="O" checked />Other
                            </div>
                        }
                    </div>
                </div>
                <div class="form-group col-md-3">
                    <label for="Domain">Domain</label>
                    <span class="text-danger">*</span>
                    <input type="text" value="@Model.Domain" class="form-control txt-width" name="Domain" id="" disabled />
                </div>                
                <div class="form-group col-md-3">
                    <label for="Department">Department</label>
                    <span class="text-danger">*</span>
                    <input type="text" value="@Model.Department" class="form-control txt-width" name="Department" id="" disabled />
                </div>    
                 <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email ID" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    
                    @* <span class="text-danger" id="empEmailError"></span> *@
                </div>
            </div>
            <br />
            
            <div class="form-row">
                <div class="form-group col-md-4">
                    <button type="submit" class="btn btn-azure btn-lg" id="btnProfileUpdate" onclick="function()">Update My Profile</button>
                </div>
            </div>
        }

    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.3/dist/jquery.validate.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.12/dist/jquery.validate.unobtrusive.min.js"></script>




<script>
    $(document).ready(function () {
        // middle name  validation
        $('#MiddleName').on('input', function () {
            let value = $(this).val();
            if (/[^a-zA-Z]/.test(value)) {
                $('#middleNameError').text('Middle Name can only contain letters.');
            } 
            else {
                $('#middleNameError').text('');
            }
        });
    });   
        
    //form submit handler, submits the value   
    $('#profileUserForm').on('submit', function(e) {
        e.preventDefault();        
        if ($(this).valid()) {
            var profilemodel = {
                EmpID: $('#EmpID').val(),
                FirstName: $('#FirstName').val(),
                MiddleName: $('#MiddleName').val(),
                LastName: $('#LastName').val(),
                Email: $('#Email').val()
            }
        }       
        $.ajax({
            type: 'POST',
            url: '/Profile/Profile',
            dataType: "json",
            data: { model: profilemodel },
            success: function (result) {
                var redirectErrorUrl = "/Login/ErrorPage";
                if (result == true) {
                    swal({
                        text: "Profile  Updated Successfully !!",
                        type: "success"
                    }).then(function () { });
                }
                else {
                    swal('Unable to Update Profile, Please check the Logs');                   
                }
            },
            error: function (error) {
                swal('Unable to update the profile, Please check the Logs folder');
                window.location.href = redirectErrorUrl;
            }
        });
            
    });    
</script>