@model Kaizen.Models.AdminModel.AddUserModel;
@{
    Layout = "SidebarLayout";
}
<style>
    #dHeader {
    font-size: 16px !important;
    margin-top: -10px;
    margin-left: 7px;
}

    #blkh {
        color: black;
        font-weight: 500;
        font-size: 13px;
        margin-left: -17px;
    }
</style>
<div class="card bg-light">

    <div class="card rounded bg-white p-2  mt-2 ml-2 mr-2 mb-2">
        <div class="col-lg-12 p-md-0 p-2">
            <div class="welcome-text">
                <label class="" id="dHeader">Masters --> Users</label>
            </div>
        </div>
    </div>

    <div class="card p-3 border rounded ml-2 mr-2 mb-2 bg-white ">

        <div class="col-md-10">
            <div><label class="card-title" id="blkh">Add User</label></div>
        </div>
    <div class="custom-line mb-3"></div>
    @using (Html.BeginForm(FormMethod.Post, new { id = "userForm" }))
    {
        @Html.AntiForgeryToken()
        <div class="form-row">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.EmpId, "Emp ID", htmlAttributes: new { @class = "control-label" })
                <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.EmpId, new { htmlAttributes = new { @class = "form-control", placeholder = "Employee ID", id = "empIdF" } })
                @Html.ValidationMessageFor(model => model.EmpId, "", new { @class = "text-danger" })
            </div>
           
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.FirstName, "First Name", htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", type = "text", pattern = "[A-Za-z]+", title = "Please enter Valid text", placeholder = "First Name" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.MiddleName, "Middle Name", htmlAttributes: new { @class = "control-label" })
                    <input type="text" asp-for="MiddleName" id="MiddleName" name="MiddleName" class="form-control txt-width" placeholder="Middle Name">
                    <span id="middleNameError" class="text-danger"></span>
                </div>
        </div>
            <div class="form-row">

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.LastName, "Last Name", htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", type = "text", pattern = "[A-Za-z]+", title = "Please enter Valid text", placeholder = "Last Name" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email ID" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Phoneno, "Phone Number", htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.Phoneno, new { htmlAttributes = new { @class = "form-control", type = "tel", pattern = "[0-9]{10}", title = "Please enter a 10-digit phone number", placeholder = "Phone Number" } })
                    @Html.ValidationMessageFor(model => model.Phoneno, "", new { @class = "text-danger" })
                </div>
                
            </div>
        <div class="form-row">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.BlockId, "Block", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                    @Html.DropDownListFor(m => m.BlockId, new SelectList(Model.Blocks, "Id", "BlockName"), "--Select Block--", new { @id = "blockId", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BlockId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Did, "Domain", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                @Html.DropDownListFor(m => m.Did, new SelectList(Model.Domains, "Id", "DomainName"),"--Select Domain--", new { @id = "Did", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Did, "", new { @class = "text-danger" })
            </div> 
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.DeptId, "Department", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                <select Asp-for="DeptId" name="DeptId" id="inputDepartment" class="form-control">
                    <option selected>--Select Department--</option>
                </select>
                    @Html.ValidationMessageFor(model => model.DeptId, "", new { @class = "text-danger" })
            </div>
               
        
        </div>
        <div class="form-row">
           
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.statusname, "Status", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                @Html.DropDownListFor(model => model.statusname, new SelectList(Model.Status, "StatusID", "StatusName"), new { @class = "form-control", @id = "statusname" })
                @Html.ValidationMessageFor(model => model.statusname, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Cid, "Cadre", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                @Html.DropDownListFor(m => m.Cid, new SelectList(Model.Cadre, "Id", "CadreName"),"--Select Cadre--", new { @id = "cid", @class = "form-control" })
                   @Html.ValidationMessageFor(model => model.Cid, "",  new { @class = "text-danger" }) 
            </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Rid, "User Type", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                    @Html.DropDownListFor(m => m.Rid, new SelectList(Model.UserType, "UserTypeId", "UserDesc"), "-- Select User Type--", new { @id = "Rid", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Rid, "", new { @class = "text-danger" })
                </div>
        </div>
        <div class="form-row">
           
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                <span class="text-danger">*</span>
                <div class="editor-container">
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", placeholder = "Password" })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger validation-message" })
                </div> 
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.ConfirmPassword, "Confirm Password", htmlAttributes: new { @class = "control-label" })
                <span class="text-danger">*</span>
                <div class="editor-container">
                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password" })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger validation-message" })
                </div>
            </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    <div class="container border rounded p-1 ">
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.Gender, "Male") Male
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.Gender, "Female") Female
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.Gender, "Other") Other
                        </label>
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>
        </div>
        <span class="form-row p-4 container ">
                <button type="submit" class="btn  col-lg-2 m-1 btn-azure ">Add User</button>
                <button type="reset" class="btn col-lg-2 m-1 btn-warning" id="configreset" value="Reset">Reset</button>
     
        </span>
    }
</div>
</div>
@if (TempData["addmsg"] != null)
{
    <script>
        swal('@TempData["addmsg"]')
    </script>
}
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.3/dist/jquery.validate.min.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.12/dist/jquery.validate.unobtrusive.min.js" crossorigin="anonymous"></script>
<script>
    $(document).ready(function () {
        $("#empIdF").on("keydown", function (e) {
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13]) !== -1 ||
                (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                (e.keyCode === 67 && (e.ctrlKey === true || e.metaKey === true)) ||
                (e.keyCode === 88 && (e.ctrlKey === true || e.metaKey === true)) ||
                (e.keyCode >= 35 && e.keyCode <= 39)) {
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });

        $.validator.addMethod("exactlength", function (value, element, param) {
            return this.optional(element) || value.length === param;
        }, "Please enter exactly {0} digits.");

        $("#empIdF").validate({
            errorClass: "text-danger",
            rules: {
                empIdF: {
                    required: true,
                    digits: true,
                    minlength: 6,
                    maxlength: 8
                },
            },
            messages: {
                empIdF: {
                    required: "Employee ID is required",
                    digits: "Employee ID must be digits only",
                    minlength: "Employee ID must be a minimum of 6 and maximum of 8 digits only",
                    maxlength: "Employee ID must be a minimum of 6 and maximum of 8 digits only"
                },
            },
            submitHandler: function (form) {
                form.submit();
            }
        });

        $("#empIdF").on('keyup', function () {
            $(this).valid();
        });
    });
    $('#configreset').click(function () {
        $('#configform')[0].reset();
    });
    $(document).ready(function () {
        $("#userForm").validate({
            errorClass: "text-danger",
        })
    
        // middle name  validation 
        $('#MiddleName').on('input', function () {
            let value = $(this).val();
            if (/[^a-zA-Z]/.test(value)) {
                $('#middleNameError').text('Only letters are allowed.');
            } else {
                $('#middleNameError').text('');
            }
        });

        // Fetch departments based on selected domain
        $('#Did').change(function () {
            var Domain = $('#Did').val().trim();
            $.ajax({
                type: 'GET',
                url: '/Admin/FetchDepartment',
                dataType: "json",
                data: { DomainID: Domain },
                success: function (result) {
                    if (result) {
                        var dropdown = $('#inputDepartment');
                        dropdown.empty();
                        dropdown.append($('<option>', {
                            value: '',
                            text: '--Select Department--'
                        }));
                        for (var i = 0; i < result.length; i++) {
                            $('#inputDepartment').append('<option value="' + result[i].deptId + '">' + result[i].departmentName + '</option>');
                        }
                    } else {
                        Swal.fire('Please Select Domain');
                    }
                },
                error: function (error) {
                }
            });
        });
    });
</script>