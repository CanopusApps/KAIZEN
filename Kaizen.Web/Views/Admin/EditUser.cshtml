@model Kaizen.Models.AdminModel.EditUserModel;
@{
    Layout = "SidebarLayout";
}
<style>
    #dHeader {
        font-size: 16px !important;
        margin-top: -10px;
        margin-left: 7px;
    }

</style>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<style>
    #dHeader {
        font-size: 16px !important;
        margin-top: -10px;
        margin-left: 7px;
    }

    #blkh {
        color: black;
        font-weight: 500;
        font-size: 13px;
    }
    .right{
        float:right;
    }
</style>
<div class="card bg-light">

    <div class="card rounded bg-white p-2  mt-2 ml-2 mr-2 mb-2">
        <div class="col-lg-12 p-md-0 p-2">
            <div class="welcome-text">
                <label class="" id="dHeader">Masters --> Users</label>
            </div>
        </div>
    </div>

    <div class="card p-3 border rounded ml-2 mr-2 mb-2 bg-white ">
        <div class="form-row">
            <div class="form-group col-md-9">
                <label class="card-title" id="blkh">Edit User</label>
            </div>
            <div class="form-group col-md-3">
                <button type="submit" onclick="location.href='@Url.Action("ViewUser","ViewUser")'" class="btn btn-primary right">Back to User List</button>
            </div>
        </div>
        <div class="custom-line mb-3"></div>
        @using (Html.BeginForm(FormMethod.Post, new { id = "editUserForm" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-row">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.EmpID, "Emp ID", htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.EmpID, new { htmlAttributes = new { @class = "form-control", placeholder = "Employee ID", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.EmpID, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.FirstName, "First Name", htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", type = "text", pattern = "[A-Za-z]+", title = "Please enter Valid text", placeholder = "First Name" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.MiddleName, "Middle Name", htmlAttributes: new { @class = "control-label" })
                    <input type="text" asp-for="MiddleName" id="MiddleName" name="MiddleName" class="form-control txt-width" placeholder="Middle Name">
                    <span id="middleNameError" class="text-danger"></span>
                </div>                
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.LastName, "Last Name", htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", type = "text", pattern = "[A-Za-z]+", title = "Please enter Valid text", placeholder = "Last Name" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email ID" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.PhoneNo, "Phone Number", htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @class = "form-control", type = "tel", pattern = "[0-9]{10}", title = "Please enter a 10-digit phone number", placeholder = "Phone Number" } })
                    @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                </div>
                
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.BlockId, "Block", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                    @Html.DropDownListFor(m => m.BlockId, new SelectList(Model.Blocks, "Id", "BlockName"), "--Select Block--", new { @id = "blockId", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BlockId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Did, "Domain", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                    @Html.DropDownListFor(m => m.Did, new SelectList(Model.Domains, "Id", "DomainName"), "--Select Domain--", new { @id = "Did", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Did, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.DeptId, "Department", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                    <select Asp-for="DeptId" name="DeptId" id="inputDepartment" class="form-control">
                        <option selected>--Select Department--</option>
                    </select>
                </div>
                          
            </div>

            <div class="form-row">
              
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.StatusName, "Status", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                    @Html.DropDownListFor(model => model.StatusName, new SelectList(Model.Status, "StatusID", "StatusName"), new { @class = "form-control", @id = "statusname" })
                    @Html.ValidationMessageFor(model => model.StatusName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Cid, "Cadre", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                    @Html.DropDownListFor(m => m.Cid, new SelectList(Model.Cadre, "Id", "CadreName"), "--Select Cadre--", new { @id = "cid", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Cid, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Rid, "User Type", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                    @Html.DropDownListFor(m => m.Rid, new SelectList(Model.UserType, "UserTypeId", "UserDesc"), "--Select User Type--", new { @id = "Rid", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Rid, "", new { @class = "text-danger" })
                </div>
               
            </div>
            <div class="form-row">
                <div class="form-group col-md-4" style="border:1px solid #dee2e6!important;padding:6px">
                    @Html.LabelFor(model => model.ImageApprover, htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    <label class="checkbox-inline">
                        @Html.CheckBoxFor(model => model.ImageApprover)
                    </label>
                    @Html.ValidationMessageFor(model => model.ImageApprover, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                    <span class="text-danger">*</span>
                    <div class="container border rounded p-1 ">
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.Gender, "Male") Male
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.Gender, "Female") Female
                        </label>
                        <label class="radio-inline">
                            @Html.RadioButtonFor(model => model.Gender, "Other") Other
                        </label>
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>

                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <button type="submit" class="btn btn-azure btn-lg">Update User</button>
                </div>
            </div>
        }

    </div>
</div>
@* <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> *@
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.3/dist/jquery.validate.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.12/dist/jquery.validate.unobtrusive.min.js"></script>

<script>
    $(document).ready(function () {
        // Validate form using jQuery Validation Plugin
        $("#userForm").validate({
            errorClass: "text-danger",
            rules: {
                EmpId: {
                    required: true
                },
                FirstName: {
                    required: true,
                    pattern: "[A-Za-z]+"
                },
                LastName: {
                    required: true,
                    pattern: "[A-Za-z]+"
                },
                Email: {
                    required: true,
                    email: true
                },
                Phoneno: {
                    required: true,
                    pattern: "[0-9]{10}"
                },
                Did: {
                    required: true
                },
                DeptId: {
                    required: true
                },
                Rid: {
                    required: true
                },
                statusname: {
                    required: true
                },
                Cid: {
                    required: true
                },
                Gender: {
                    required: true
                }
                // Password: {
                //     required: true,
                //     minlength: 6
                // },
                // ConfirmPassword: {
                //     required: true,
                //     equalTo: "#Password"
                // }
            },
            messages: {
                EmpId: {
                    required: "Employee ID is required"
                },
                FirstName: {
                    required: "Name is required",
                    pattern: "Please enter a valid name"
                },
                LastName: {
                    required: "Name is required",
                    pattern: "Please enter a valid name"
                },
                Email: {
                    required: "Email is required",
                    email: "Please enter a valid email address"
                },
                Phoneno: {
                    required: "Phone number is required",
                    pattern: "Please enter a 10-digit phone number"
                },
                Did: {
                    required: "Domain is required"
                },
                DeptId: {
                    required: "Department is required"
                },
                Rid: {
                    required: "User type is required"
                },
                statusname: {
                    required: "Status is required"
                },
                Cid: {
                    required: "Cadre is required"
                },
                Gender: {
                    required: "Gender is required"
                }
                // Password: {
                //     required: "Password is required",
                //     minlength: "Password must be at least 6 characters long"
                // },
                // ConfirmPassword: {
                //     required: "Confirm password is required",
                //     equalTo: "Passwords do not match"
                // }
            },
            submitHandler: function (form) {
                $("#EmpID").attr("readonly", false);
                var formData = $(form).serialize();
                return false; // Prevent default form submission
            }
        });

        $(function getSesson() {
           
            if (sessionStorage.getItem("editUser")) {
                var editUser = JSON.parse(sessionStorage.getItem("editUser"));
                $("#EmpID").val(editUser['empid']);
                $("#HidEmpID").val(editUser['empid']);
                $("#FirstName").val(editUser['FirstName'].trim());
                $("#MiddleName").val(editUser['MiddleName']);
                $("#LastName").val(editUser['LastName']);
                $("#Email").val(editUser['email']);
                $("#PhoneNo").val(editUser['phoneno']);
                // $("#blockId").val(editUser['blockdesc']);
                // $("#Password").val(editUser['password']);
                // $("#ConfirmPassword").val(editUser['password']);
                // var domainName = editUser['domain'];
                $('#Did option').map(function () {
                    if ($(this).text() == editUser['domain']) return this;
                }).attr('selected', 'selected').change();
                $('#blockId option').map(function () {
                    if ($(this).text() == editUser['blockdesc']) return this;
                }).attr('selected', 'selected').change();

                

                $('#Rid option').map(function () {
                    if ($(this).text() == editUser['usertype']) return this;
                }).attr('selected', 'selected');
                $('#cid option').map(function () {
                    if ($(this).text() == editUser['cadre']) return this;
                }).attr('selected', 'selected');
                $('#statusname').val(editUser['status']);
                // $("input[name=mygroup]").val([5]);
                if (editUser['ImageApprove'] == 1) {
                    $('#ImageApprover').prop('checked', true);
                }
                // $('#Gender option[value="Male"]').attr('selected', 'selected');
                // $('#Gender option[value="M"]').attr('selected', 'selected');
                // $("input[name='Gender'][value='Male']").attr("checked", true);
                if (editUser['gender'] == 'M') {
                    $("input[name='Gender'][value='Male']").attr("checked", true);
                } else if (editUser['gender'] == 'F') {
                    $("input[name='Gender'][value='Female']").attr("checked", true);
                } else if (editUser['gender'] == 'O') {
                    $("input[name='Gender'][value='Other']").attr("checked", true);
                }
            } else {
                // don't do it after
            }
        });

        // Fetch departments based on selected domain
        $('#Did').change(function () {
            var Domain = $('#Did').val().trim();
            $.ajax({
                type: 'POST',
                url: '/Admin/FetchDepartment',
                dataType: "json",
                data: { DomainID: Domain },
                success: function (result) {
                    if (result) {
                        var dropdown = $('#inputDepartment');
                        dropdown.empty();
                        dropdown.append($('<option>', {
                            value: 'all',
                            text: '--Select Department--'
                        }));
                        for (var i = 0; i < result.length; i++) {
                            $('#inputDepartment').append('<option value="' + result[i].deptId + '">' + result[i].departmentName + '</option>');
                        }
                        var editUserdata = JSON.parse(sessionStorage.getItem("editUser"));
                        var selectedDept = editUserdata['department'];
                        $('#inputDepartment option').each(function () {
                            if ($(this).text() == selectedDept) {
                                $(this).prop('selected', true);
                            }
                        });
                    } else {
                        Swal.fire('Please Select Domain');
                    }
                },
                error: function (error) {
                }
            });
        });

        // $(function selectDepartment() {
        //     var dept = editUser['department'];
        //     $('#inputDepartment option').each(function () {
        //         if ($(this).text() == dept) {
        //             $(this).attr('selected', 'selected');
        //         }
        //     });
        // });


    });


</script>
<script type="text/javascript">
    $(document).ready(function () {
        $('#editUserForm').on('submit', function (e) {
            e.preventDefault(); 
            if ($(this).valid()) {
                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: $(this).serialize(),
                    success: function (response) {
                        swal({
                            text: "Record Updated successfully !!",
                            type: "success"
                        }).then(okay => {
                            if (okay) {
                                window.location.href = '/ViewUser/ViewUser';
                            }
                        });
                    },
                    error: function (xhr, status, error) {
                        // Handle error here
                    }
                });
            }
        });
    });
</script>


