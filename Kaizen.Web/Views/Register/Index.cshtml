@model Kaizen.Models.AdminModel.RegisterModel
@{
    Layout = "Empty";
}

<style>
    input[type="radio"] {
        display: inline-block !important;
    }
    .loginbox-title {
        margin-top: 10px;
        position: relative;
        text-align: center;
        width: 100%;
        height: 35px;
        font-family: 'Lucida Sans', 'trebuchet MS', Arial, Helvetica;
        color: #30465e;
    }
    .custom-line {
        border-bottom: 1px solid #dee2e6;
        margin: 0 30px;
    }
    .btn {
        background-color :#2dc3e8;
        color: white !important;
    }
    .form-check-label {
        margin-left: 10px;
    }
    .card{
        border-radius: 1.25rem;
        background: rgba(255, 255, 255, 0.9); 
        padding: 20px;
    }
    .logo {
        width: 100px; 
        display: block;
        margin-left: auto;
        margin-right: auto;
    }
</style>

@using (Html.BeginForm(FormMethod.Post, new { id = "userForm" }))
{
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-5">
                <div class="card margin-top-50 mx-5">
                    <img src="\assets\img\tatalogo.png" alt="Logo" class="logo">
                    <div class="loginbox-title" style="font-size: 25px;font-weight: bold;">
                        TEPL KAIZAN <br/>
                    </div>
                    <div style="text-align: center;font-size:14px;">Register with your Details</div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Name, "Name", htmlAttributes: new { @class = "control-label" })
                                <span id="NameError" class="error-message">*</span>
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Please Enter Your Name" } })
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                                <span id="GenderError" class="error-message">*</span>
                                <div class="container border rounded p-1">
                                    <label class="radio-inline">
                                        <input type="radio" id="GenderMale" name="Gender" value="Male" @(Model.Gender == "Male" ? "checked" : "") /> Male
                                    </label>
                                    <label class="radio-inline">
                                        <input type="radio" id="GenderFemale" name="Gender" value="Female" @(Model.Gender == "Female" ? "checked" : "") /> Female
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.EmpId, "Emp ID", htmlAttributes: new { @class = "control-label" })
                                <span id="EmpIdError" class="error-message">*</span>
                                @Html.EditorFor(model => model.EmpId, new { htmlAttributes = new { @class = "form-control", placeholder = "Employee ID" } })
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                                <span id="PasswordError" class="error-message">*</span>
                                <div class="editor-container">
                                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", placeholder = "Please Enter your Password" })
                                </div>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Did, "Domain", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                                <span id="DidError" class="error-message"></span>
                                @Html.DropDownListFor(m => m.Did, new SelectList(Model.Domains, "Id", "DomainName"), "--Select Domain--", new { @id = "Did", @class = "form-control" })
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.DeptId, "Department", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                                <span id="DeptIdError" class="error-message"></span>
                                <select Asp-for="DeptId" name="DeptId" id="inputDepartment" class="form-control">
                                    <option selected>--Select Department--</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.Phoneno, "Phone Number", htmlAttributes: new { @class = "control-label" })
                                <span id="PhonenoError" class="error-message">*</span>
                                @Html.EditorFor(model => model.Phoneno, new { htmlAttributes = new { @class = "form-control", placeholder = "Phone Number" } })
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <label for="email">Email</label>
                                <span id="EmailError" class="error-message"></span>
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email ID" } })
                            </div>
                        </div>
                        <button type="submit" class="btn btn-block btn-azure" id="registerButton">Register Me In</button>
                        <div class="row mb-3">
                            <div>
                                <a href="/Login/Index" id="reglink">Back to Login? Login </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
   
}

<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.12/dist/jquery.validate.unobtrusive.min.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
  
        function ValidateForm() {
            var isValid = true;
            $(".error-message").text(""); // Clear error messages
            $(".form-control").css("border-color", ""); // Reset border color

            var NameValue = $("#Name").val().trim();
            var GenderValue = $("input[name='Gender']:checked").val();
            var EmpIdValue = $("#EmpId").val().trim();
            var PasswordValue = $("#Password").val().trim();
            var DidValue = $("#Did").val().trim();
            var DeptIdValue = $("#inputDepartment").val().trim();
            var PhonenoValue = $("#Phoneno").val().trim();
            var EmailValue = $("#Email").val().trim();


            //Name Validation
            var nameRegex = /^[a-zA-Z]+$/;
            if (NameValue === "") {
                $("#Name").css("border-color", "red");
                $("#NameError").text("Name is required.");
                isValid = false;
            } else if (NameValue.length > 50) {
                $("#Name").css("border-color", "red");
                $("#NameError").text("Name cannot be longer than 50 characters.");
                isValid = false;
            } else if (!nameRegex.test(NameValue)) {
                $("#Name").css("border-color", "red");
                $("#NameError").text("Name can only contain letters.");
                isValid = false;
            }

            // Gender validation
            var genderRegex = /^(Male|Female)$/;
            if (!GenderValue) {
                $("#GenderMale, #GenderFemale").css("border-color", "red");
                $("#GenderError").text("Gender is required.");
                isValid = false;
            } else if (!genderRegex.test(GenderValue)) {
                $("#GenderMale, #GenderFemale").css("border-color", "red");
                $("#GenderError").text("Gender must be Male or Female.");
                isValid = false;
            }

            // Employee ID validation
            var empIdRegex = /^\d{6}$/;
            if (EmpIdValue === "") {
                $("#EmpId").css("border-color", "red");
                $("#EmpIdError").text("Employee ID is required.");
                isValid = false;
            } else if (!empIdRegex.test(EmpIdValue)) {
                $("#EmpId").css("border-color", "red");
                $("#EmpIdError").text("Employee ID must be a number with exactly 6 digits.");
                isValid = false;
            }

            //Password Validation
            if (PasswordValue === "") {
                $("#Password").css("border-color", "red");
                $("#PasswordError").text("Password is required.");
                isValid = false;
            } else if (PasswordValue.length < 6 || PasswordValue.length > 10) {
                $("#Password").css("border-color", "red");
                $("#PasswordError").text("Password must be between 6 and 10 characters.");
                isValid = false;
            }

            //Domain Validation
            if (DidValue === "" || DidValue === "--Select Domain--") {
                $("#Did").css("border-color", "red");
                $("#DidError").text("Domain is required.");
                isValid = false;
            }

            //Department Validation
            if (DeptIdValue === "" || DeptIdValue === "--Select Department--") {
                $("#inputDepartment").css("border-color", "red");
                $("#DeptIdError").text("Department is required.");
                isValid = false;
            }

            //Phone No. Validation
            var phoneRegex = /^\d{10}$/;
            if (PhonenoValue === "") {
                $("#Phoneno").css("border-color", "red");
                $("#PhonenoError").text("Phone Number is required.");
                isValid = false;
            } else if (!phoneRegex.test(PhonenoValue)) {
                $("#Phoneno").css("border-color", "red");
                $("#PhonenoError").text("Invalid Phone Number.");
                isValid = false;
            }
        
           

                return isValid;
            }
   
    // Fetch departments based on selected domain
        $('#Did').change(function () {
            var Domain = $('#Did').val().trim();
            $.ajax({
                type: 'POST',
                url: '/Register/FetchDepartment',
                dataType: "json",
                data: { DomainID: Domain },
                success: function (result) {
                    if (result) {
                        var dropdown = $('#inputDepartment');
                        dropdown.empty();
                        dropdown.append($('<option>', {
                            value: '',
                            text: 'Select Department'
                        }));
                        for (var i = 0; i < result.length; i++) {
                            $('#inputDepartment').append('<option value="' + result[i].deptId + '">' + result[i].departmentName + '</option>');
                        }
                         } else {
                        Swal.fire('Please Select Domain');
                        }
                    },
                      error: function (error) {
                           console.error("AJAX Error:", error);
                       }
            });
        });


        $("#userForm").submit(function(event) {
            debugger;
            event.preventDefault(); // Prevent default form submission
            if (ValidateForm()) {
                var formData = $(this).serialize(); // Get form data
                $.ajax({
                    type: "POST",
                    url: "/Register/RegisterUser",
                    data: formData,
                    success: function(response) {
                        console.log(response)
                        if (response.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: 'Registration successful.',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(function() {
                                window.location.href = "/Login/Index"; // Redirect to login page
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: response.message,
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    },
                    error: function(error) {
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred during registration. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                        console.log("Registration error: ", error);
                    }
                });
            }
        });
  
</script>