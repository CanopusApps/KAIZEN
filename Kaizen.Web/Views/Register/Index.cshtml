@model Kaizen.Models.AdminModel.RegisterModel
@{
    Layout = "Empty";
}

<style>
   
    .loginbox-title {
        margin-top: 10px;
        position: relative;
        text-align: center;
        width: 100%;
        height: 35px;
        font-family: 'Lucida Sans', 'trebuchet MS', Arial, Helvetica;
        color: #30465e;
    }
    .custom-line {
        border-bottom: 1px solid #dee2e6;
        margin: 0 30px;
    }
    .btn {
        background-color :#2dc3e8;
        color: white !important;
    }
    .form-check-label {
        margin-left: 10px;
    }
    .card{
        border-radius: 1.25rem;
        background: rgba(255, 255, 255, 0.9); 
        padding: 20px;
    }
    .logo {
        width: 100px; 
        display: block;
        margin-left: auto;
        margin-right: auto;
    }

    .container .card-body .form-check input[type=checkbox],
    .container .card-body .form-check input[type=radio],
    .container .card-body input[type=radio] {
        opacity: 1 !important;
        position: relative !important;
        left: auto !important;
        z-index: auto !important;
        width: auto !important;
        height: auto !important;
        cursor: pointer !important;
    }

    .login-image {
        width: 100%;
        height: 70px;
        object-fit: contain;
    }
</style>

@using (Html.BeginForm(FormMethod.Post, new { id = "userForm", onsubmit = "return validateDepartment();" }))
{
    @Html.AntiForgeryToken()
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card margin-top-50 mx-5">
                    <img src="~/assets/img/tepl kaizen image.png" class="login-image" alt="Kaizen Image" />
                    <div style="text-align: center; font-size:14px;" class="loginbox-title">Register with your Details</div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.FirstName, "First Name", htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control alpha-input", placeholder = "Please Enter Your First Name" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger validation-message" })
                            </div>

                            @* <div class="col-md-6">
                                @Html.LabelFor(model => model.MiddleName, "Middle Name", htmlAttributes: new { @class = "control-label" })
                                <input type="text" asp-for="MiddleName" id="MiddleName" name="MiddleName" class="form-control alpha-input txt-width" placeholder="Middle Name">
                            </div> *@
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.LastName, "Last Name", htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control alpha-input", placeholder = "Please Enter Your Last Name" } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger validation-message" })
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Phoneno, "Phone Number", htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                @Html.EditorFor(model => model.Phoneno, new { htmlAttributes = new { @class = "form-control numeric-input", placeholder = "Phone Number", id = "Phoneno" } })
                                @Html.ValidationMessageFor(model => model.Phoneno, "", new { @class = "text-danger validation-message" })
                            </div>

                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                <div class="container border rounded p-1 ">
                                    <label class="radio-inline">
                                        @Html.RadioButtonFor(model => model.Gender, "Male") Male
                                    </label>
                                    <label class="radio-inline">
                                        @Html.RadioButtonFor(model => model.Gender, "Female") Female
                                    </label>
                                    @* <label class="radio-inline">
                                        @Html.RadioButtonFor(model => model.Gender, "Other") Other
                                    </label> *@
                                </div>
                                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                            </div>
                            
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email ID" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger validation-message" })
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.EmpId, "Emp ID", htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                @Html.EditorFor(model => model.EmpId, new { htmlAttributes = new { @class = "form-control numeric-input", placeholder = "Employee ID", id = "EmpId" } })
                                @Html.ValidationMessageFor(model => model.EmpId, "", new { @class = "text-danger validation-message" })
                            </div>

                            
                            
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                <div class="editor-container">
                                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", placeholder = "Please Enter your Password" })
                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger validation-message" })
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.ConfirmPassword, "Confirm Password", htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password" })
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger validation-message" })
                            </div>
                            
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.BlockId, "Block", htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                @Html.DropDownListFor(m => m.BlockId, new SelectList(Model.Blocks, "Id", "BlockName"), "--Select Block--", new { @id = "blockId", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.BlockId, "", new { @class = "text-danger validation-message" })
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Did, "Department", htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                @Html.DropDownListFor(m => m.Did, new SelectList(Model.Domains, "Id", "DomainName"), "--Select Department--", new { @id = "Did", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Did, "", new { @class = "text-danger validation-message" })
                            </div>
                            
                            
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.DeptId, "Sub-Department", htmlAttributes: new { @class = "control-label" })
                                <span class="text-danger">*</span>
                                <select asp-for="DeptId" name="DeptId" id="inputDepartment" class="form-control">
                                    <option selected>--Select Sub-Department--</option>
                                </select>
                                <span id="deptError" class="text-danger"></span>
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.Cid, "Cadre", htmlAttributes: new { @class = "control-label" })<span class="text-danger">*</span>
                                @Html.DropDownListFor(m => m.Cid, new SelectList(Model.Cadre, "Id", "CadreName"), "--Select Cadre--", new { @id = "cid", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Cid, "", new { @class = "text-danger" })
                            </div>
                           
                        </div>

                        <button type="submit" class="btn btn-block btn-azure" id="registerButton">Register Me In</button>
                        <div class="row mb-3">
                            <div>
                                <a href="/Login/Index" id="reglink">Back to Login? Login</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.12/dist/jquery.validate.unobtrusive.min.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
    $(document).ready(function () {
        $('#Phoneno').on('input', function () {
            let inputVal = $(this).val();
            if (inputVal.startsWith('0')) {
                $(this).val(inputVal.substring(1));
            }
        });
    });

    document.querySelectorAll('.numeric-input').forEach(function (element) {
        element.addEventListener('input', function (e) {
            this.value = this.value.replace(/[^0-9]/g, '');
        });
    });

    document.querySelectorAll('.alpha-input').forEach(function (element) {
        element.addEventListener('input', function (e) {
            this.value = this.value.replace(/[^a-zA-Z]/g, '');
        });
    });
    function validateDepartment() {
        var departmentSelect = document.getElementById("inputDepartment");
        var errorMessage = document.getElementById("deptError"); // Get the span element
        var selectedValue = departmentSelect.value;

        if (selectedValue === "--Select Department--" || selectedValue === "") {
            errorMessage.innerText = "Please select a department."; 
            departmentSelect.focus();
            return false; // Prevent form submission
        } else {
            errorMessage.innerText = ""; // Clear the error message if valid
        }

        return true;
    }

    // document.getElementById("inputDepartment").addEventListener("change", validateDepartment);
    // $('#configreset').click(function () {
    //     $('#configform')[0].reset();
    // });

    $(document).ready(function () {
        $("#userForm").submit(function (event) {
            event.preventDefault(); 
             if ($("#userForm").valid() && validateDepartment()) {
                var formData = $(this).serialize(); // Serialize form data

                $.ajax({
                    type: "POST",
                    url: "/Register/RegisterUser",
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: 'Registration successful.',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(function () {
                                window.location.href = "/Login/Index"; 
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: response.message,
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    },
                    error: function (error) {
                        Swal.fire({
                            title: 'Error!',
                            text: 'An error occurred during registration. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                });
             }
        });


        // $("#userForm").validate({
        //     errorClass: "text-danger",
        // });

        // Fetch departments based on selected domain
        $('#Did').change(function () {
            var Domain = $('#Did').val().trim();
            $.ajax({
                type: 'GET',
                url: '/Admin/FetchDepartment',
                dataType: "json",
                data: { DomainID: Domain },
                success: function (result) {
                    var dropdown = $('#inputDepartment');
                    dropdown.empty();
                    if (result.length > 1) {
                        dropdown.append($('<option>', {
                            value: '',
                            text: '--Select Department--'
                        }));
                        for (var i = 0; i < result.length; i++) {
                            dropdown.append('<option value="' + result[i].deptId + '">' + result[i].departmentName + '</option>');
                        }
                    } else if (result.length === 1) {
                        dropdown.append($('<option>', {
                            value: result[0].deptId,
                            text: result[0].departmentName
                        }));
                    } else {
                        dropdown.append($('<option>', {
                            value: '',
                            text: '--No Departments Available--'
                        }));
                    }
                },
                error: function (error) {
                }
            });
        });
    });

</script>
<script>
    $(document).ready(function () {
        $('#EmpId').on('change', function () {
            var inputValue = $(this).val();
            if (inputValue.length >= 6) {
                $.ajax({
                    url: '/Admin/CheckIfExists',
                    type: 'GET',
                    data: { value: inputValue },
                    success: function (response) {
                        if (response.exists) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Emp ID already exists.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            }).then(function () {
                                $('#EmpId').val('');
                            });
                        }
                    },
                    error: function (error) {
                    }
                });
            }
        });
    });
</script>
